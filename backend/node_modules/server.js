const express = require('express');
const http = require('http');
const cors = require('cors');
const { Server } = require('socket.io');
const bodyParser = require('body-parser');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

app.use(cors());
app.use(bodyParser.json());

let scoreData = {
  teamA: "IND",
  teamB: "AUS",
  battingTeam: "IND",
  runs: 0,
  wickets: 0,
  overs: 0,
  balls: 0,
  commentary: "Match starts soon!",
  players: [
    { name: "Player 1", runs: 0, balls: 0, striker: true },
    { name: "Player 2", runs: 0, balls: 0, striker: false }
  ],
  bowlers: [
    { name: "Bowler 1", overs: 0.0, wickets: 0 }
    
  ]
};

app.get('/api/score', (req, res) => {
  res.json(scoreData);
});

app.post('/api/score', (req, res) => {
  const {
    runs,
    wickets,
    overs,
    balls,
    commentary,
    players,
    bowlers
  } = req.body;

  scoreData.runs = typeof runs === 'number' ? runs : scoreData.runs;
  scoreData.wickets = typeof wickets === 'number' ? wickets : scoreData.wickets;
  scoreData.overs = typeof overs === 'number' ? overs : scoreData.overs;
  scoreData.balls = typeof balls === 'number' ? balls : scoreData.balls;
  scoreData.commentary = commentary || scoreData.commentary;

  if (Array.isArray(players)) {
    scoreData.players = players.map(p => ({
      name: p.name || "Unknown",
      runs: typeof p.runs === 'number' ? p.runs : 0,
      balls: typeof p.balls === 'number' ? p.balls : 0,
      striker: !!p.striker
    }));
  }

  if (Array.isArray(bowlers)) {
    scoreData.bowlers = bowlers.map(b => ({
      name: b.name || "Unknown",
      overs: typeof b.overs === 'number' ? b.overs : 0.0,
      wickets: typeof b.wickets === 'number' ? b.wickets : 0
    }));
  }

  io.emit('score_update', scoreData);
  res.json({ success: true, message: "Score updated", score: scoreData });
});

io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);
  socket.emit('score_update', scoreData);
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

const PORT = 3002;
server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
